import org.apache.tools.ant.filters.ReplaceTokens

import static java.nio.charset.StandardCharsets.UTF_8

plugins {
    id 'idea'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'jvm-test-suite'
    id 'jacoco-report-aggregation'
    id 'signing'
}

group = 'io.github.honhimw'
version = libs.versions.version.get()
description = 'Reactive surrealdb rest client using cbor encoding.'

def title = 'SurrealDB REST Client for java'
def lombokVersion = '1.18.36'
def slf4jVersion = '2.0.16'

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    compileOnly { extendsFrom annotationProcessor }
    testCompileOnly { extendsFrom testAnnotationProcessor }
}

dependencies {
    implementation platform(libs.jackson)
    implementation platform(libs.reactor)

    implementation "io.projectreactor.netty:reactor-netty-http"

    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'
    implementation libs.slf4j

    compileOnly libs.jakarta.annotations
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    annotationProcessor libs.lombok
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

processTestResources {
    def nm = new LinkedHashMap<String, String>()
    project.properties.forEach { k, v ->
        nm.put(k, v.toString())
    }
    nm.put('project.artifactId', project.name)
    def properties = loadProfileProperties()
    properties.forEach { k, v ->
        nm.put(String.valueOf(k), String.valueOf(v))
    }
    filter ReplaceTokens, beginToken: '#{', endToken: '}', tokens: nm
}

publishing {

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/honhimW/surrealdb-cbor")
            credentials {
                username = githubProperties().getProperty("gpr.user") as String
                password = githubProperties().getProperty("gpr.key") as String
            }
        }
        maven {
            name = "sonatype-snapshots"
            url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            credentials {
                username = sonatypeProperties().getProperty("sonatype.username") as String
                password = sonatypeProperties().getProperty("sonatype.password") as String
            }
        }
        maven {
            name = "sonatype-releases"
            url = uri("https://s01.oss.sonatype.org/content/repositories/releases/")
            credentials {
                username = sonatypeProperties().getProperty("sonatype.username") as String
                password = sonatypeProperties().getProperty("sonatype.password") as String
            }
        }
        maven {
            name = "sonatype-central"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = sonatypeProperties().getProperty("sonatype.username") as String
                password = sonatypeProperties().getProperty("sonatype.password") as String
            }
        }
    }

    publications {
        create('gpr', MavenPublication) {
            from components.java
            pom {
                name.set(title)
                description.set(project.description)
                url.set("https://github.com/honhimW/surrealdb-cbor")
                licenses {
                    license {
                        name.set('The Apache License, Version 2.0')
                        url.set('https://www.apache.org/licenses/LICENSE-2.0.txt')
                    }
                }
                developers {
                    developer {
                        name.set('honhimw')
                        email.set('honhimw@outlook.com')
                        url.set('https://honhimW.github.io')
                    }
                }
                scm {
                    connection.set('scm:git:git://github.com/honhimW/surrealdb-cbor.git')
                    developerConnection.set('scm:git:ssh://github.com/honhimW/surrealdb-cbor.git')
                    url.set('https://github.com/honhimW/surrealdb-cbor')
                }
            }
        }
    }

}

signing {
    def props = sonatypeProperties()
    def keyId = props.getProperty('signing.keyId')
    def ringFile = props.getProperty('signing.secretKeyBase64')
    def password = props.getProperty('signing.password')
    if (!(keyId == null || ringFile == null || password == null)) {
        useInMemoryPgpKeys(keyId, ringFile, password)
        sign publishing.publications.gpr
    }
}

jar {
    enabled(true)
    archiveClassifier = ''
}

javadoc {
    options.encoding = UTF_8.name()
    options.locale = 'en_US'
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = UTF_8.name()
//    options.forkOptions.jvmArgs += ['-Duser.language=en', '-Duser.country=NO']
    inputs.files(tasks.withType(ProcessResources))
//    options.compilerArgs << "-Werror" << "-Xlint:deprecation" << "-Xlint:unchecked"
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation platform('org.junit:junit-bom:5.11.4')
            }
            targets {
                all {
                    testTask.configure {
                        testLogging {
                            events(
//                                    'passed',
                                    'skipped',
                                    'failed'
                            )
                        }
                        finalizedBy jacocoTestReport
                    }
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setOutputLocation layout.buildDirectory.dir('jacocoHtml')
    }
}

tasks.register('publish-snapshot') {
    version = version + '-SNAPSHOT'
    finalizedBy ':publishAllPublicationsToSonatype-snapshotsRepository'
}
tasks.register('publish-release') {
    finalizedBy ':publishAllPublicationsToSonatype-releasesRepository'
}
tasks.register('publish-central') {
    finalizedBy ':publishAllPublicationsToSonatype-centralRepository'
}

Properties loadProfileProperties() {
    def properties = new Properties()
    properties.put('host', '127.0.0.1')
    properties.put('port', '7700')
    properties.put('username', 'root')
    properties.put('password', 'root')
    properties.put('namespace', 'test')
    properties.put('database', 'test')
    def file = file("profile-${findProperty('profiles.active')}.properties")
    if (file.exists()) {
        file.withInputStream { properties.load(it) }
    }
    return properties
}

Properties githubProperties() {
    def properties = new Properties()

    def file = file("github.properties")
    if (file.exists()) {
        file.withInputStream { properties.load(it) }
    }
    return properties
}

Properties sonatypeProperties() {
    def properties = new Properties()

    def file = file("sonatype.properties")
    if (file.exists()) {
        file.withInputStream { properties.load(it) }
    }
    return properties
}
